<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="C:\Program Files (x86)\MSBuildExtensionPack\4.0\MSBuild.ExtensionPack.tasks"/>

    <PropertyGroup>
        <BuildDrive>C:</BuildDrive>
        <ReleaseVersion>4.0.15.0</ReleaseVersion>
        <ProductName>MSBuild Extension Pack</ProductName>
        <DropFolder>$(BuildDrive)\$(ProductName)\$(ReleaseVersion)</DropFolder>
        <RootFolder>$(MSBuildProjectDirectory)..\..</RootFolder>
        <BuildOutput>$(RootFolder)\BuildBinaries</BuildOutput>
        <BuildHelpFile>true</BuildHelpFile>
        <RTWRelease>true</RTWRelease>
    </PropertyGroup>
    
    <ItemGroup>
        <CoreFolders Include="$(DropFolder);
                              $(BuildOutput)"/>
    </ItemGroup>
    
    <Target Name="Default" DependsOnTargets="Initialize;
                                             Compile;
                                             CleanUp;
                                             Setup;
                                             CopyFiles;
                                             CreateZips">
        <OnError ExecuteTargets="ErrorTarget"/>
    </Target>
    
    <Target Name="Initialize">
        <Microsoft.Build.Tasks.MakeDir Directories="%(CoreFolders.Identity)"/>
        <MSBuild.ExtensionPack.FileSystem.Folder TaskAction="RemoveContent" Path="%(CoreFolders.Identity)"/>
    </Target>

    <Target Name="Compile">
        <Microsoft.Build.Tasks.MSBuild Projects="$(RootFolder)\MainSolution.sln" BuildInParallel="true" Properties="Configuration=Release" Targets="Clean;Build"/>
    </Target>

    <Target Name="CleanUp">
        <ItemGroup>
            <FilesToCleanUp Include="$(BuildOutput)\Microsoft.*;
                                     $(BuildOutput)\*.lastcodeanalysissucceeded;
                                     $(BuildOutput)\*.xml;
                                     $(BuildOutput)\*.dll;
                                     $(BuildOutput)\*.txt;
                                     $(BuildOutput)\*.wixpdb;
                                     $(BuildOutput)\vjslib.dll;
                                     $(BuildOutput)\MainSolution.Release Any CPU.txt;
                                     $(BuildOutput)\MSBuild.ExtensionPack.FrameworkTests.*"
                            Exclude="$(BuildOutput)\MSBuild.ExtensionPack*.dll;
                                     $(BuildOutput)\Ionic.Zip.dll;
                                     $(BuildOutput)\Inter*.dll"/>
            <ResourceFiles Include="Resources\*.*"/>
        </ItemGroup>
        <Microsoft.Build.Tasks.Delete Files="@(FilesToCleanUp)" />
        <Microsoft.Build.Tasks.Copy SourceFiles="@(ResourceFiles)" DestinationFolder="$(BuildOutput)"/>
    </Target>

    <Target Name="Setup" Condition="$(RTWRelease) == 'true'">
        <Microsoft.Build.Tasks.MSBuild Projects="$(RootFolder)\Build\Setup\Setup.x86.wixproj" BuildInParallel="true" Properties="Configuration=Release;Platform=x86" Targets="Clean;Build"/>
        <Microsoft.Build.Tasks.MSBuild Projects="$(RootFolder)\Build\Setup\Setup.x64.wixproj" BuildInParallel="true" Properties="Configuration=Release;Platform=x64" Targets="Clean;Build"/>

        <!-- Use the VSDevEnv task rather than MSBuild so that the solution variables are resolved for Wix compilation 
        <MSBuild.ExtensionPack.VisualStudio.VSDevEnv Version="11.0" FilePath="$(RootFolder)\Build\Setup\Setup.x64.wixproj" Configuration="Release|x64" OutputFolder="$(BuildOutput)" Rebuild="true">
            <Output TaskParameter="ExitCode" PropertyName="Exit" />
        </MSBuild.ExtensionPack.VisualStudio.VSDevEnv>
        <Error Condition="$(Exit) != 0"/>-->
    </Target>
    
    <Target Name="CopyFiles">
        <ItemGroup>
            <ReleaseFiles Include="$(BuildOutput)\*.*"
                          Exclude="$(BuildOutput)\*.msi;$(BuildOutput)\*.tasks"/>
        </ItemGroup>
        <Microsoft.Build.Tasks.Copy SourceFiles="@(ReleaseFiles)" DestinationFolder="$(DropFolder)\Binaries"/>
        <Microsoft.Build.Tasks.Copy SourceFiles="$(RootFolder)\Common\MSBuild.ExtensionPack.tasks" DestinationFolder="$(DropFolder)\x86"/>
        <Microsoft.Build.Tasks.Copy SourceFiles="$(RootFolder)\Common\64\MSBuild.ExtensionPack.tasks" DestinationFolder="$(DropFolder)\x64"/>
        <Microsoft.Build.Tasks.Copy SourceFiles="$(BuildOutput)\MSBuild Extension Pack 4 (x86).msi" DestinationFolder="$(DropFolder)\x86" Condition="$(RTWRelease) == 'true'"/>
        <Microsoft.Build.Tasks.Copy SourceFiles="$(BuildOutput)\MSBuild Extension Pack 4 (x64).msi" DestinationFolder="$(DropFolder)\x64" Condition="$(RTWRelease) == 'true'"/>
    </Target>

    <Target Name="CreateZips" Condition="$(RTWRelease) == 'true'">
        <MSBuild.ExtensionPack.Compression.DNZip TaskAction="Create" CompressPath="$(DropFolder)" ZipFileName="$(DropFolder)\MSBuild Extension Pack $(ReleaseVersion).zip"/>
    </Target>

    <Target Name="ErrorTarget">
        <Message Text="Something has gone wrong"/>
    </Target>
</Project>